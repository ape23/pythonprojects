# -*- coding: utf-8 -*-
"""regresspytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rRBjaR9TB01mxCICCzPlw-ku3YsQR_GI
"""

import torch.nn as nn
import torch
import numpy as np

inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58],
                   [102, 43, 37], [69, 96, 70], [73, 67, 43],
                   [91, 88, 64], [87, 134, 58], [102, 43, 37],
                   [69, 96, 70], [73, 67, 43], [91, 88, 64],
                   [87, 134, 58], [102, 43, 37], [69, 96, 70]],
                  dtype='float32')

targets = np.array([[56, 70],[81, 101],[119, 133],
                    [22, 37],[103, 119],[56, 70],
                    [81, 101],[119, 133],[22, 37],
                    [103, 119],[56, 70],[81, 101],
                    [119, 133], [22, 37], [103, 119]],
                   dtype='float32')
inputs = torch.from_numpy(inputs)
targets = torch.from_numpy(targets)

from torch.utils.data import TensorDataset

train_ds = TensorDataset(inputs, targets)
train_ds[0:3]

from torch.utils.data import DataLoader

batch_size = 5
train_dl = DataLoader(train_ds, batch_size, shuffle=True)

for xb, yb in train_dl:
  print('Batch:')
  print(xb)
  print(yb)
  break

model = nn.Linear(3, 2)
print(model.weight)
print(model.bias)

list(model.parameters())

preds = model(inputs)
preds

import torch.nn.functional as F

loss_fn = F.mse_loss

loss = loss_fn(model(inputs), targets)
print(loss)

opt = torch.optim.SGD(model.parameters(), lr=1e-5)

def fit(num_epochs, model, loss_fn, opt):
  for epoch in range(num_epochs):

    for xb, yb in train_dl:

      pred = model(xb)

      loss = loss_fn(pred, yb)

      loss.backward()

      opt.step()

      opt.zero_grad()

    if (epoch + 1) % 10 == 0:
      print('Epoch [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, loss.item()))

fit(100, model, loss_fn, opt)

preds = model(inputs)
preds

targets



